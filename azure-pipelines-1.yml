trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  SONAR_PROJECT_KEY: 'swatisinha8403_Pipeline'
  SONAR_ORGANIZATION: 'swatisinha8403'
  SONAR_TOKEN: $(SONAR_TOKEN)  # Define this in your Azure DevOps pipeline secrets

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: |
    python -m pip install --upgrade pip
    python -m pip install selenium==4.12.0
    python -m pip install pytest
    python -m pip install pytest-html
    python -m pip install pytest-xdist
    python -m pip install pytest-nunit
    python -m pip install pytest-cov
    python -m pip install -r requirements.txt
  displayName: 'Install dependencies and plugins'

- script: |
    python -m pip list
  displayName: 'Check installed Python packages'

# üîç SonarCloud - Begin Analysis
- task: SonarCloudPrepare@2
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '$(SONAR_ORGANIZATION)'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(SONAR_PROJECT_KEY)'
    cliProjectName: 'Pipeline'
    extraProperties: |
      sonar.python.coverage.reportPaths=coverage.xml

# üöÄ Run Unit Tests + Coverage
- script: |
    pytest tests/test_unit.py -rA --cov=form_webapp --cov-report=html:coverage_report --cov-report=xml:coverage.xml
  displayName: 'Run Unit Tests with Coverage'

- script: |
    pytest -rA --html=reports/Report.html --self-contained-html --doctest-modules --nunitxml=nunit/test-results.xml -n 5
  displayName: 'Run Selenium Tests and Generate Reports'

# üîé SonarCloud - Run Analysis
- task: SonarCloudAnalyze@2
  displayName: 'Run SonarCloud Code Analysis'

# üì¢ SonarCloud - Publish Results
- task: SonarCloudPublish@2
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarCloud Results'

- script: |
    ls -la
    echo "Inside coverage_report directory:"
    ls -la coverage_report || echo "coverage_report folder NOT found!"
  displayName: 'Check if coverage report generated'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: 'nunit/test-results.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'Publish NUnit Test Results'
  displayName: 'Publish NUnit Test Results'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'reports/Report.html'
    ArtifactName: 'TestReports'
    publishLocation: 'Container'
  displayName: 'Publish Pytest HTML Report'
